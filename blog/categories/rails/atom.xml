<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2020-07-27T16:05:47-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's new in React-Rails 2.0?]]></title>
    <link href="http://rmosolgo.github.io/blog/2017/04/13/whats-new-in-react-rails-2-dot-0/"/>
    <updated>2017-04-13T11:59:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2017/04/13/whats-new-in-react-rails-2-dot-0</id>
    <content type="html"><![CDATA[<p>For <a href="http://planning.center">Planning Center</a> free week, I cooked up <a href="https://github.com/reactjs/react-rails"><code>react-rails</code></a> 2.0 üéä.</p>

<!-- more -->


<p>Here are a few highlights. For the full list, see the <a href="https://github.com/reactjs/react-rails/blob/master/CHANGELOG.md">changelog</a>!</p>

<h2>Webpacker support</h2>

<p><a href="https://github.com/rails/webpacker">Webpacker</a> was great to work with. <code>react-rails</code> now supports webpacker for:</p>

<ul>
<li>Mounting components with <code>&lt;%= react_component(...) %&gt;</code> via <code>require</code></li>
<li>Server rendering from a webpacker pack (<code>server_rendering.js</code>)</li>
<li>Loading the unobtrusive JavaScript (UJS)</li>
<li>Installation and component generators</li>
</ul>


<p>A nice advantage of using webpacker is that you can load React.js from NPM instead of the <code>react-rails</code> gem. This way, you aren&rsquo;t bound to the React.js version which is included with the Ruby gem. You can pick any version you want!</p>

<h2>UJS on npm</h2>

<p>To support frontends built with Node.js, <code>react-rails</code>&rsquo;s  UJS driver is available on NPM as <a href="https://www.npmjs.com/package/react_ujs"><code>react_ujs</code></a>. It performs setup during <code>require</code>, so these two are equal:</p>

<pre><code class="js">// Sprockets:
//= require react_ujs

// Node, etc:
require("react_ujs")
</code></pre>

<h2>Request-based prerender context</h2>

<p>If you&rsquo;re prerendering your React components on the server, you can perform setup and teardown in your Rails controller. For example, you might use these hooks to populate a flux store.</p>

<p>First, add the <code>per_request_react_rails_prerenderer</code> helper to your controller:</p>

<pre><code class="ruby">class PagesController &lt; ApplicationController
  per_request_react_rails_prerenderer
  # ...
end
</code></pre>

<p>Then, you can access <code>react_rails_prerenderer</code> in the controller action:</p>

<pre><code class="ruby">def show
  js_context = react_rails_prerenderer.context
  js_context.exec(js_setup_code)
  render :show
  js_context.exec(js_teardown_code)
end
</code></pre>

<p>That way, you can properly prepare &amp; clean up a JS VM for server rendering.</p>

<h2>Re-detect events</h2>

<p>Previously, <code>ReactRailsUJS</code> &ldquo;automatically&rdquo; detected which libraries you were using and hooked up to their events for rendering components.</p>

<p>It still checks for libraries during its initial load, but you can <em>also</em> re-check as needed:</p>

<pre><code class="js">// Check the global context for libraries like Turbolinks and hook up to them:
ReactRailsUJS.detectEvents()
</code></pre>

<p>This function removes previous event handlers, so it&rsquo;s safe to call anytime. (This was added in <code>2.0.2</code>.)</p>

<h2>Other Takeaways</h2>

<p>See the <a href="https://github.com/reactjs/react-rails/blob/master/CHANGELOG.md">changelog</a> for bug fixes and a new default server rendering configuration.</p>

<p>Webpacker is great! Setup was smooth and the APIs were clear and convenient. I&rsquo;m looking forward to using it more.</p>

<p>üçª Here&rsquo;s to another major version of <code>react-rails</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watching files during Rails development]]></title>
    <link href="http://rmosolgo.github.io/blog/2017/04/12/watching-files-during-rails-development/"/>
    <updated>2017-04-12T14:09:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2017/04/12/watching-files-during-rails-development</id>
    <content type="html"><![CDATA[<p>You can tell Ruby on Rails to respond to changes in certain files during development.</p>

<!-- more -->


<p>Rails knows to watch <code>config/routes.rb</code> for changes and reload them when the files change. You can use the same mechanism to watch other files and take action when they change.</p>

<p>I used this feature for <a href="https://github.com/reactjs/react-rails">react-rails</a> server rendering and for <a href="http://graphql.pro">GraphQL::Pro</a> static queries.</p>

<h2>app.reloader</h2>

<p>Every Rails app has <a href="https://github.com/rails/rails/blob/8f59a1dd878f56798f88369fa5b448f17a29679d/railties/lib/rails/application.rb#L135">a <code>@reloader</code></a>, which is a local subclass of <a href="http://api.rubyonrails.org/classes/ActiveSupport/Reloader.html"><code>ActiveSupport::Reloader</code></a>. It&rsquo;s used whenever you call <a href="https://github.com/rails/rails/blob/fe1f4b2ad56f010a4e9b93d547d63a15953d9dc2/railties/lib/rails/console/app.rb#L29-L34"><code>reload!</code> in the Rails console</a>.</p>

<p>It&rsquo;s attached to a <a href="https://github.com/rails/rails/blob/d3c9d808e3e242155a44fd2a89ef272cfade8fe8/railties/lib/rails/application/default_middleware_stack.rb#L51-L53">rack middleware</a> which <a href="https://github.com/rails/rails/blob/d3c9d808e3e242155a44fd2a89ef272cfade8fe8/actionpack/lib/action_dispatch/middleware/executor.rb#L10">calls <code>#run!</code></a> (which, in turn, <a href="https://github.com/rails/rails/blob/291a098c111ff419506094e14c0186389b0020ca/activesupport/lib/active_support/reloader.rb#L57-L63">calls the reload blocks if it detects changes</a>).</p>

<h2>config.to_prepare</h2>

<p>You can add custom preparation hooks with <code>config.to_prepare</code>:</p>

<pre><code class="ruby">initializer :my_custom_preparation do |app|
  config.to_prepare do
    puts "Reloading now ..."
  end
end
</code></pre>

<p>When Rails detects a change, this block will be called. It&rsquo;s implemented by <a href="https://github.com/rails/rails/blob/ce97c79445f9ac4b056e34deaaaaf25cadc08b72/railties/lib/rails/application/finisher.rb#L53-L55">registering the block with <code>app.reloader</code></a>.</p>

<h2>app.reloaders</h2>

<p>To add <em>new conditions</em> for which Rails should reload, you can add to the <a href="https://github.com/rails/rails/blob/8f59a1dd878f56798f88369fa5b448f17a29679d/railties/lib/rails/application.rb#L126"><code>app.reloaders</code> array</a>:</p>

<pre><code class="ruby"># Object responds to `#updated?`
class MyWatcher
  def updated?
    # ...
  end
end

# ...

initializer :my_custom_watch_condition do |app|
  # Register custom reloader:
  app.reloaders &lt;&lt; MyWatcher.new
end
</code></pre>

<p>The object&rsquo;s <a href="https://github.com/rails/rails/blob/ce97c79445f9ac4b056e34deaaaaf25cadc08b72/railties/lib/rails/application/finisher.rb#L156-L158"><code>updated?</code> method will be called</a> by the reloader. If any reloader returns <code>true</code>, the middleware will run all <code>to_prepare</code> blocks (via the call to <code>@reloader.run!</code>).</p>

<h2>FileUpdateChecker</h2>

<p>Rails includes a goodie for watching files. <a href="http://api.rubyonrails.org/classes/ActiveSupport/FileUpdateChecker.html"><code>ActiveSupport::FileUpdateChecker</code></a> is great for:</p>

<ul>
<li>Watching specific files for changes (<a href="https://github.com/rails/rails/blob/ce97c79445f9ac4b056e34deaaaaf25cadc08b72/railties/lib/rails/application/routes_reloader.rb#L41"><code>config/routes.rb</code> is watched this way</a>)</li>
<li>Watching a directory of files for changes, additions and deletions (<a href="https://github.com/rails/rails/blob/ce97c79445f9ac4b056e34deaaaaf25cadc08b72/railties/lib/rails/application/finisher.rb#L164"><code>app/**/*.rb</code> is watched this way</a>)</li>
</ul>


<p>You can create your own <code>FileUpdateChecker</code> and add it to <code>app.reloaders</code> to reload Rails when certain files change:</p>

<pre><code class="ruby"># Watch specific files:
app.reloaders &lt;&lt; ActiveSupport::FileUpdateChecker.new(["my_important_file.txt", "my_other_important_file.txt"])
# Watch directory-extension pairs, eg all `.txt` and `.md` files in `app/important_files` and subdirectories:
app.reloaders &lt;&lt; ActiveSupport::FileUpdateChecker([], { "app/important_files" =&gt; [".txt", ".md"] })
</code></pre>

<p>Some filesystems support an evented file watcher implementation, <a href="http://api.rubyonrails.org/classes/ActiveSupport/EventedFileUpdateChecker.html"><code>ActiveSupport::EventedFileUpdateChecker</code></a>. <code>app.config.file_watcher</code> will return the proper filewatcher class for the current context.</p>

<pre><code class="ruby">app.reloaders &lt;&lt; app.config.file_watcher(["my_important_file.txt", "my_other_important_file.txt"])
</code></pre>

<h2>All Together Now</h2>

<p><code>react-rails</code> maintains a pool of V8 instances for server rendering React components. These instances are initialized with a bunch of JavaScript code, and whenever a developer changes a JavaScript file, we need to reload them with the new code. This requires two steps:</p>

<ul>
<li>Adding a new watcher to <code>app.reloaders</code> to detect changes to JavaScript files</li>
<li>Adding a <code>to_prepare</code> hook to reload the JS instances</li>
</ul>


<p>It looks basically like this:</p>

<pre><code class="ruby">initializer "react_rails.watch_js_files" do |app|
  # Watch for changes to javascript files:
  app.reloaders &lt;&lt; app.config.file_watcher.new([], {
    # Watch the asset pipeline:
    Rails.root.join("app/assets/javascripts").to_s =&gt; ["jsx", "js"],
    # Watch webpacker:
    Rails.root.join("app/javascript").to_s =&gt; ["jsx", "js"]
  })

  config.to_prepare do
    React::ServerRendering.reset_pool
  end
end
</code></pre>

<p>The <a href="https://github.com/reactjs/react-rails/blob/bbb1ff10c787ca6a186e39df57fe5b228b37bd7e/lib/react/rails/railtie.rb#L26-L39">full implementation</a> supports some customization. You can see similar (and more complicated) examples with <a href="https://github.com/rails/rails/blob/ce97c79445f9ac4b056e34deaaaaf25cadc08b72/railties/lib/rails/application/finisher.rb#L126-L142">routes reloading</a>, <a href="https://github.com/rails/rails/blob/e9abbb700acd8165a8994d8b2a700e507fb3b7ff/activesupport/lib/active_support/i18n_railtie.rb#L59-L74">i18n reloading</a> and <a href="https://github.com/rails/rails/blob/ce97c79445f9ac4b056e34deaaaaf25cadc08b72/railties/lib/rails/application/finisher.rb#L163-L183"><code>.rb</code> reloading</a>.</p>

<p>Happy reloading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parameterized styles with React, Rails and Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/10/18/parameterized-styles-with-react-rails-and-sprockets/"/>
    <updated>2016-10-18T15:05:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/10/18/parameterized-styles-with-react-rails-and-sprockets</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rmosolgo/css_modules"><code>css_modules</code></a> provides an approach to styling UI components in a local-first way.</p>

<!-- more -->


<p>Let&rsquo;s say you have the same component to render in two contexts:</p>

<p>```html</p>

<div className="resources">
  <DetailPane />
</div>


<p>// later &hellip;</p>

<div className="rooms">
  <DetailPane />
</div>


<pre><code>
To style `DetailPane`, you probably want:

- A set of shared styles to apply by default
- A way to customize styles for each context

How can we accomplish that? The [`css_modules`](https://github.com/rmosolgo/css_modules) gem provides a solution.

(This example uses React components, but see below for a brief analogy to Rails partials.)

## CSS Modules

Let's treat each context as a module in CSS:
</code></pre>

<p>// in views/resources.scss
:module(resources) {
  // &hellip;
}</p>

<p>// in views/rooms.scss
:module(rooms) {
  // &hellip;
}
```</p>

<p>Since each context has a <code>DetailPane</code>, let&rsquo;s define a mixin and share it between the two:</p>

<pre><code class="scss">// in shared/detail_pane.scss
@mixin detail-pane {
  .detail-pane {
    margin: 5px;
    border-radius: 5px;
    border: 1px solid #777;

    .description {
      font-size: 1.2rem;
    }
  }
}

// in views/resources.css
:module(resources) {
  @include detail-pane;
}

// in views/rooms.css
:module(rooms) {
  @include detail-pane;
}
</code></pre>

<h3>Why a mixin?</h3>

<p>Using a mixin makes it easier to track usage within the application: you only need to search for <code>@include</code>s, rather than class names.</p>

<p>It also enforces a clear separation from base styles and custom styles. Base styles are hard-coded in the mixins. Custom styles are implemented as <em>overrides</em> within the module or as <em>parameters</em> to the mixin (using <code>$</code>-variables).</p>

<h3>Applying Styles</h3>

<p>To apply the modulized styles to a component, provide the component with a CSS module prop:</p>

<p>```js
var resourcesModule = CSSModules(&ldquo;resources&rdquo;)</p>

<div className="resources">
  <DetailPane cssModule={resourcesModule}/>
</div>


<p>// later &hellip;</p>

<p>var roomsModule = CSSModules(&ldquo;rooms&rdquo;)</p>

<div className="rooms">
  <DetailPane cssModule={roomsModule}/>
</div>


<pre><code>
Then, update `DetailPane` so that it gets class names from `this.props.cssModule`:
</code></pre>

<p>var DetailPane = React.createClass({
  propTypes: {
    cssModule: React.PropTypes.func.isRequired,
  },</p>

<p>  render: function() {
    var cssModule = this.props.cssModule
    return (
      <div className={cssModule("detail-pane")}>
        <p className={cssModule("description")} />
      </div>
    )
  },
})
```</p>

<p>Now, the two instances of <code>DetailPane</code> will <em>not</em> share class names, but they will share common code from <code>@mixin detail-pane</code>.</p>

<p>The rendered output will contain &ldquo;modulized&rdquo; class names. The module is translated into an opaque prefix on the class name:</p>

<p>```html</p>

<div class="resources_abc123_detail-pane">
  <p class="resources_abc123_description"></p>
</div>


<div class="rooms_xyz987_detail-pane">
  <p class="rooms_xyz987_description"></p>
</div>


<pre><code>
### Customizing Styles

You can customize the styles with _overrides_ or _parameters_.

Apply overrides by "reopening" class names inside the module:
</code></pre>

<p>:module(resources) {
  @include detail-pane;
  .detail-pane {
    // needs extra space here:
    margin: 10px;
  }
}
```</p>

<p>This will <em>only</em> affect <code>.detail-pane</code> within the <code>resources</code> module.</p>

<p>Alternatively, you can parameterize the mixin. Add a <code>$</code>-parameter to the mixin:</p>

<pre><code class="scss">// in shared/detail_pane.scss
@mixin detail-pane($margin) {
  .detail-pane {
    margin: $margin;
  }
}
</code></pre>

<p>Then provide a value when including that mixin:</p>

<pre><code class="scss">// in views/resources.scss
:module(resources) {
  @include detail-pane(10px);
  // .detail-pane will have 10px margin
}

// in views/rooms.scss
:module(rooms) {
  @include detail-pane(5px);
  // .detail-pane will have 5px margin
}
</code></pre>

<p>Sass also includes <a href="http://advancedsass.com/articles/default-mixin-arguments-for-easier-theming.html">default values and optional arguments</a>.</p>

<h2>Bare class names?</h2>

<p>Perhaps you need to support bare class names (no module). For example, if you extra <code>@mixin detail-pane</code> but your app still contains bare  <code>.detail-pane</code> class names, you might apply the mixin to the global scope:</p>

<pre><code class="scss">@mixin detail-pane {
  // ...
}

// Also style global .detail-pane
@include detail-pane;
</code></pre>

<p>To use bare class names in your <code>&lt;DetailPane /&gt;</code> component, use a <em>null module</em>:</p>

<pre><code class="js">// This module has no name, it renders bare selectors:
var nullModule = CSSModules(null)
nullModule("detail-pane")
// "detail-pane"
</code></pre>

<p>You can pass that in for the <code>cssModule</code> prop:</p>

<pre><code class="html">&lt;DetailPane cssModule={CSSModules(null)} /&gt;
</code></pre>

<p>Then, the rendered output will contain bare class names:</p>

<p>```html</p>

<div class="detail-pane">
  <p class="description"></p>
</div>


<pre><code>
## Use with Rails Partials

You can also parameterize the class names in Rails partials.

Get a module with the view helper, then pass it to a partial:
</code></pre>

<p>&lt;% resources_module = css_module(&ldquo;resources&rdquo;) %>
&lt;%= render partial: &ldquo;detail_pane&rdquo;, locals: { style_module: resources_module } %></p>

<!-- later -->


<p>&lt;% rooms_module = css_module(&ldquo;rooms&rdquo;) %>
&lt;%= render partial: &ldquo;detail_pane&rdquo;, locals: { style_module: rooms_module } %>
<code>``
s that w
Then, use the</code>style_module` in the partial:</p>

<p>```erb</p>

<div class="<%= style_module.selector("detail-pane") %>">
  <p class="<%= style_module.selector("description") %>"></p>
</div>


<pre><code>
Rails can also generate a null module by providing `nil` as the module name:
</code></pre>

<p>null_style_module = css_module(nil)
null_style_module.selector(&ldquo;detail-pane&rdquo;)</p>

<h1>=> &ldquo;detail-pane&rdquo;</h1>

<p>```</p>

<p>This allows you to parameterize the class names in your partials.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding a Browser-Ready File for Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/"/>
    <updated>2016-05-19T22:00:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets</id>
    <content type="html"><![CDATA[<p>I like using Sprockets, but sometimes it&rsquo;s hard to find a file to include in the asset pipeline. Here are some methods I use to find browser-ready JavaScript files.</p>

<!-- more -->


<p>There are a few good options for getting browser-ready files for JavaScript libraries:</p>

<ul>
<li>Download a file from the project&rsquo;s website</li>
<li>Download a file from the project&rsquo;s source code repository</li>
<li>Download a file from a CDN (npmcdn is great for cases where files are only &ldquo;compiled&rdquo; for releases)</li>
<li>Build the file yourself, following the project&rsquo;s documentation</li>
</ul>


<p><strong>Don&rsquo;t</strong> get a minified version. Sprockets will minify it for us later. In the meantime, the unminified version will help us during development.</p>

<h3>From a Website</h3>

<p>This is the good ol' way of getting JavaScript files. Because we still use browsers, you can still download these files.</p>

<p>Here are some examples:</p>

<p><img src="/images/sprockets/website_download_d3.png" width="300"></p>

<p><img src="/images/sprockets/website_download_react.png" width="500"></p>

<p><img src="/images/sprockets/website_download_moment.png" width="300"></p>

<h3>From the Repo</h3>

<p>Many projects maintain a browser build in the project&rsquo;s source. You may have to poke around a bit, but likely places are the project&rsquo;s root folder, the <code>dist/</code> folder, or the <code>build/</code> folder.</p>

<p>As you explore the repo, remember to examine a stable ref, such as a release or a stable branch.</p>

<p>Here are some examples:</p>

<p><img src="/images/sprockets/repo_download_c3.png" width="300"></p>

<p><img src="/images/sprockets/repo_download_immutable.png" width="300"></p>

<p><img src="/images/sprockets/repo_download_three.png" width="300"></p>

<h3>From a CDN</h3>

<p><a href="https://cdnjs.com/libraries">CDNJS</a> hosts browser-ready files for many libraries.</p>

<p>Sometimes, an author only compiles browser-ready files for releases to NPM. You can get these files from <a href="https://npmcdn.com/">npmcdn</a>.</p>

<p>Since npmcdn is serving NodeJS projects, employ a similar technique to searching the project repo for a file:</p>

<ul>
<li>Check the &ldquo;main&rdquo; file</li>
<li>Check the &ldquo;dist&rdquo; or &ldquo;build&rdquo; directories</li>
</ul>


<h3>Build it from Source</h3>

<p>If a pre-built, browser-ready file is not available, you may have to build it yourself! The project&rsquo;s readme will contain instructions to do so. If it doesn&rsquo;t &hellip; you may want to reconsider adding this dependency! (Even if it&rsquo;s well-maintained, it&rsquo;s not a good match for this asset bundling approach.)</p>

<h2>Summary</h2>

<p>Hopefully these will work well for you!</p>

<p>You may have to learn a bit of RequireJS, jspm, Grunt, Browserify, Gulp, Webpack or Rollup along the way. (Ok, probably not Rollup, sadly.) But at least you don&rsquo;t have to use them day-in and day-out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/"/>
    <updated>2016-05-19T08:44:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets</id>
    <content type="html"><![CDATA[<p>When reviewing issues for <code>react-rails</code>, I see many questions about how to gather JavaScript dependencies with Sprockets. Here is how I use Sprockets to manage JavaScript dependencies.</p>

<!-- more -->


<p>I&rsquo;m looking for a few things in a JavaScript bundler:</p>

<ul>
<li>Stability: I don&rsquo;t want any changes to my dependencies unless I explicitly make them.</li>
<li>Clarity: I want to be able to quickly tell what dependencies I have (library and version).</li>
<li>Insulation: I don&rsquo;t want to rely on external services during development, deployment or runtime (except for downloading <em>new</em> dependencies, of course)</li>
<li>Feature-completeness: I want to concatenate and minify my assets and serve them with cache headers</li>
</ul>


<h2>Using Sprockets</h2>

<p>To <strong>add a new dependency</strong>:</p>

<ol>
<li>Find a non-minified, browser-ready version of your dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> (for example, <code>app/assets/javascripts/moment-v2.13.0.js</code>)</li>
<li>Require it in <code>application.js</code> with <code>//= require ./vendor/moment-v2.13.0</code></li>
<li>Access the global variable as needed in your app (eg <code>moment</code>)</li>
</ol>


<p>To <strong>update</strong> a dependency:</p>

<ol>
<li>Find a non-minified, browser-ready version of the updated dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> and remove the <em>old</em> version from that directory</li>
<li>Update the <code>//= require</code> directive with the new version number</li>
<li>Check the dependency&rsquo;s changelog and update your app as needed. (Search your project for the global variable to find usages, eg <code>moment</code>.)</li>
</ol>


<p>To <strong>remove</strong> a dependency:</p>

<ol>
<li>Remove its file (<code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code>)</li>
<li>Remove the <code>//= require</code> directive</li>
<li>Search your project for the global variable and remove all usages</li>
</ol>


<h2>Finding a browser-ready file</h2>

<p>This got its own page: <a href="/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/">Finding a browser-ready file</a>.</p>

<h2>Adding the file to <code>vendor/</code></h2>

<p>Use an <strong>unminified</strong> version of the library. It will help in debugging development and viewing diffs when you update the dependency. Have no fear, Sprockets will minify it for you for production.</p>

<p>Include the <strong>version number</strong> in the file name. This will give you more confidence in updating the library, since you&rsquo;ll know what version you&rsquo;re coming from.</p>

<h2>Integrating with Sprockets</h2>

<p>The <code>//= require ./vendor/{library}-v{version}</code> directive is your friend. Like an entry in <code>package.json</code>, it tells the reader what dependency you have.</p>

<p>Now, your library will be accessible by its global name, such as <code>React</code>, <code>d3</code> or <code>Immutable</code>.</p>

<p>Consuming a library via global variable is not ideal. But it <em>does</em> help you remember that, at the end of the day, the browser is one giant, mutable namespace, so you must be a good citizen! At least global variables can be grepped like any other dependency.</p>

<p>Consider isolating your dependency. For example, you could wrap <code>Pusher</code> in an application-specific event emitter. This way, when you update Pusher, you only have to check one file for its usages. (Some libraries are poor candidates for isolation. My app will never be isolated from React!)</p>

<h2>Caveats</h2>

<p>There are some things Sprockets doesn&rsquo;t provide for me, which I wish it did:</p>

<ul>
<li>Named imports: I wish there was a good alternative to global namespacing with Sprockets, but not yet. (It&rsquo;s not a deal breaker &ndash; it doesn&rsquo;t hurt to be familiar with this constraint because it&rsquo;s the reality of the browser, anyways.)</li>
<li>Tree shaking: It wish I could only transmit the parts of Underscore.js I actually used!</li>
</ul>


<p>Perhaps I should read up on Sprockets and submit a patch üòé</p>

<p>Also, there&rsquo;s one case where copy-pasting isn&rsquo;t a great solution. Some libraries (like React.js) have <em>separate</em> &ldquo;development&rdquo; and &ldquo;production&rdquo; builds. The production build has fewer runtime checks than the development build, making it smaller and faster. There are a few solutions to this problem:</p>

<ul>
<li>Use a gem which provides the proper file for each environment (like <code>react-rails</code>)</li>
<li>Add environment-specific folders to the asset pipeline (like <code>react-rails</code> does, I can write more on this if need be)</li>
<li>Use the development build in productiosn (weigh the costs first: what&rsquo;s the difference in behavior, performance and file size?)</li>
</ul>

]]></content>
  </entry>
  
</feed>
