<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gulp.js | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/gulp-dot-js/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2020-07-27T16:05:47-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Gulp.js to build Batman.js apps without Rails]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/03/22/using-gulp-dot-js-to-build-batman-dot-js-without-rails/"/>
    <updated>2014-03-22T10:39:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/03/22/using-gulp-dot-js-to-build-batman-dot-js-without-rails</id>
    <content type="html"><![CDATA[<p>If the <a href="https://github.com/batmanjs/batman-rails">batman-rails gem</a> isn&rsquo;t an option, <a href="http://gulpjs.com">gulp.js</a> is a good candidate for compiling batman.js apps for production.</p>

<!-- more -->


<p>To prepare your app for production, you need to:</p>

<ul>
<li>compile your CoffeeScript files into a JavaScript file</li>
<li>preload your HTML into <code>Batman.View.store</code>.</li>
</ul>


<p>These can both be accomplished with gulp.js tasks.</p>

<h2>Setup</h2>

<p>Let&rsquo;s assume your batman.js project has the folder structure:</p>

<pre><code>my_app/
├── batman/
|   ├── my_app.coffee
|   ├── models/
|   |   └── my_model.coffee
|   ├── controllers/
|   |   └── my_models_controller.cofee
|   ├── views/
|   |   └── my_models/
|   |       └── my_models_show_view.coffee
|   └── html/
|       └── my_models/
|           ├── show.jade
|           └── index.jade
├── javascripts/
|   └── batman.js
└── Gulpfile.js
</code></pre>

<p>Notice that the <code>html</code> folder actually contains <code>.jade</code> files. We&rsquo;ll use gulp.js to compile those, but you can skip that step if you&rsquo;re using plain HTML.</p>

<p><strong>Install gulp</strong> with <code>npm install -g gulp</code>. All gulp plugins required below must also be installed &ldquo;by hand&rdquo; with <code>npm install &lt;gulp-plugin&gt;</code></p>

<h2>Compiling your application code</h2>

<p>Here&rsquo;s a gulp.js task that takes the <code>batman/</code> directory above and compiles it to one Javascript file, <code>javascripts/application.js</code>:</p>

<pre><code class="javascript Gulpfile.js">var gulp = require('gulp');
var coffee = require('gulp-coffee');
var concat = require('gulp-concat');

// include top-level .coffee files (`my_app.coffee`) first:
var appSources = ["./batman/*.coffee", "./batman/*/*.coffee"]

gulp.task("build", function(){
  gulp.src(appSources)
    .pipe(concat("application.coffee")) // so CoffeeScript will compile all together
    .pipe(coffee())
    .pipe(concat("application.js"))
    .pipe(gulp.dest("./javascripts/"))
})
</code></pre>

<p>Now, you can run:</p>

<pre><code>gulp build
</code></pre>

<h2>Preloading your templates</h2>

<p>Batman.js&rsquo;s fetch-html-as-needed approach is great for develoment, but not for production. Here&rsquo;s a task that will load files from the <code>html/</code> directory, convert them from jade to HTML, then inline them as JavaScript code that preloads the app with the HTML it needs.</p>

<pre><code class="javascript Gulpfile.js">var gulp = require('gulp');
var concat = require('gulp-concat');
var jade = require('gulp-jade');
var batmanTemplates = require("gulp-batman-templates")

gulp.task("html", function(){
  gulp.src(["./batman/html/**/*.jade"])
    .pipe(jade())
    .pipe(batmanTemplates())
    .pipe(concat('templates.js'))
    .pipe(gulp.dest("./javascripts/"))
})
</code></pre>

<h2>Finishing Up</h2>

<p>Let&rsquo;s join the to javascript files together:</p>

<pre><code class="javascript Gulpfile.js">gulp.task("finalize", function() {
  gulp.src(["./javascripts/application.js", "./javascripts/templates.js"])
    .pipe(concat("application.js"))
    .pipe(gulp.dest("./javascripts/"))
});
</code></pre>

<p>And make our <code>default</code> gulp task to watch the project and build whenever it changes:</p>

<pre><code class="javascript Gulpfile.js">gulp.task('default', function(){
  gulp.watch('./batman/**/*', ["build", "html", "finalize"])
});
</code></pre>

<p>So now, all we need to do is:</p>

<pre><code>gulp
</code></pre>

<p>And in the layout:</p>

<pre><code class="html">  &lt;script src='http://rmosolgo.github.io/javascripts/batman.js'&gt;&lt;/script&gt;
  &lt;script src='http://rmosolgo.github.io/javascripts/application.js'&gt;&lt;/script&gt;
</code></pre>

<p>Voila! Your app is compiled and HTML will be preloaded!</p>
]]></content>
  </entry>
  
</feed>
